{
  "General": {
    "General": {
      "Beginner": "A Beginner developer is just getting started.",
      "Advanced Beginner": "Advanced Beginners may not be the workhorse of a project but they can provide more value than they require from a dev team.",
      "Intermediate": "Ig at the bigger picture for engineering challenges and design key components from scratch. They can mentor not just support more junior devs.",
      "Expert": "Experts can not only design a solution but also see how it interacts with other software. They're capable of acting as force multipliers as well as mentors. While they may not be as “hands on keyboard” as other devs they still know how to code at an incredibly high level.\r"
    },
    "Where they are likely to be found": {
      "Beginner": "Self-taught developers who are just getting started. Programming or Computer Science students in their first two years of study.",
      "Advanced Beginner": "Developers who have been coding for a few months to a few years.",
      "Intermediate": "Most professional software developers.",
      "Advanced": "Most Advanced developers fill Tech Lead roles though they can still be found in the frontline of a team.",
      "Expert": "Experts sometimes have “Architect” in their title and are rare and valuable enough to be spread across multiple teams.\r"
    }
  },
  "Communication": {
    "Feedback and Code Reviews": {
      "Beginner": "Have not learned how to handle constructive feedback professionally. Pull Request comments are low value.",
      "Advanced Beginner": "Accepts constructive feedback calmly but may need multiple iterations to implement the technical solution. Can catch obvious errors in PRs but may be hesitant to challenge or provide actionable suggestions.",
      "Intermediate": "Accepts constructive feedback well and can implement it quickly in and out of code reviews. Provides quality guidance to Advanced Beginners.",
      "Advanced": "Accepts constructive feedback with grace and acts on it when appropriate. Provides context-appropriate and actionable feedback to develop ers of all levels. Recognizes their own biases and actively works to correct them. Capable of seeing bugs through reading code in PRs before even pulling down the branch.",
      "Expert": "Models a supportive and productive feedback culture. Accepts constructive feedback with grace and acts on it when appropriate. Proactively reaches out for more feedback in areas of lower skill or where previous mistakes were made calling out hotspots for reviewers to focus on.\r"
    },
    "Requirements": {
      "Beginner": "Requires very detailed step-by-step overviews of requirements. Can carry very small tasks. Cannot estimate time requirements.",
      "Advanced Beginner": "\"Can implement requirements but may be \"\"to the letter\"\" of acceptance criteria and no more. Will be familiar with just a few areas of a single application. Low quality estimation.\"",
      "Intermediate": "\"Implements requirements both to the letter and spirit of acceptance criteria. Asks good questions during requirements grooming. However they may fall into \"\"Bikeshedding\"\" patterns or require very detailed specifications. Mixed estimation accuracy.\"",
      "Advanced": "Frequently provides the organization / project with simpler optimized requirement alternatives. Can communicate organization / project needs to developers and design constraints to users. Can break down large requirements by domain or stack verticals. Good estimation accuracy. Effective at “pushing back” on the Business.",
      "Expert": "Consistently anticipates the organization’s / project's needs and improves grooming to suit it. Capable of building roadmaps that balance technical efficiency with maximum value. Influences testing strategies to ensure quality. Excellent estimate accuracy. Highly effective at “pushing back” on the Business.\r"
    },
    "Technical Communication": {
      "Beginner": "Low or incorrect knowledge of technical vocabulary. Explains concepts with textbook definitions without practical backing.",
      "Advanced Beginner": "Can communicate clearly with higher level developers but still struggles to discuss things with non-technical stakeholders. Can help beginners with obvious problems but will defer fairly frequently.",
      "Intermediate": "Beginning to show the ability to discuss technical topics with non-technical stakeholders. Can fluently discuss topics with correct vocabulary. Developing pattern matching and simplification skills.",
      "Advanced": "Capable of fluently discussing technical topics with simplified and direct vocabulary. Organizes written communication for consumption by the intended audience. Expert pattern matcher but may over-simplify and miss details.",
      "Expert": "Able to discuss technology with the broadest range of stakeholders from the form of simplified executive presentations to in-depth debates with solution architects on the details of tool selection. Passively builds knowledge and insight in more junior team members.\r"
    }
  },
  "Core Software Skills": {
    "Data Structures": {
      "Beginner": "Understands simple control flow and some basic collections. May fit incorrect but familiar data structures to far too many problems.",
      "Advanced Beginner": "Understands most control flow and collections. Can sometimes tell when an algorithm can be improved but probably won't know how. Follows established patterns but cannot chart a new course.",
      "Intermediate": "Can optimize advanced beginner code call out reasons for performance deficiencies and understands the basics of how data access and networking calls can affect performance.",
      "Advanced": "Strong understanding of data structures and rarely makes degenerative code mistakes. Intimately understands data access and network calls. Knows hot spots where technical debt lives and must be addressed at a solution level.",
      "Expert": "Can implement high-tier algorithms with maximum performance. Understands how to build rube-goldberg/code golf structures - and uses this knowledge to avoid them at all costs. Strong understanding of popular and valuable design patterns.\r"
    },
    "Style and Semantics": {
      "Beginner": "Methods are typically too large with verbose or otherwise unuseful names. Can imitate patterns or styles but often incorrectly.",
      "Advanced Beginner": "Will think about how to solve a problem generically before worrying about syntax. Will ask naive but still-useful questions. Will require reinforcement to follow established patterns.",
      "Intermediate": "Uses inoffensive function and variable names as a rule. Has developed opinions about coding styles and languages and can speak about their background. Highly complex code may still need a heavy hand from Advanced or Expert developers to make it beautiful.",
      "Advanced": "Has a knack for using agreeable function and variable names that other developer s use without complaint. Deviates from style when appropriate but is an advocate for shared approaches. Capable of implementing complex code and explaining it to another developer for validation.",
      "Expert": "Consistently drives high-level vision for style with high team buy-in. Influences entire codebases while writing a subset of the code. Accepts feedback and follows along when joining a new team with mature practices - even if those practices don't match the Developer's own.\r"
    },
    "General": {
      "Beginner": "Can implement greedy solutions to algorithm problems but misses corner cases. No/ low understanding of unit testing. Only familiar with a small number of frameworks some only by name.",
      "Advanced Beginner": "Can implement basic solutions that may not be optimal and catch simple corner cases. Will build tests if assigned but needs strong patterns to build off of. Strongly familiar with at least one framework.",
      "Intermediate": "\"Implements medium complexity functionality after a team discussion and can be trusted with complexity given enough detail from Senior team members. Code is generally complete and can be trusted with both unit and \"\"Dev Testing\"\" tasks.\"",
      "Advanced": "May be the first boots on the ground for a new feature creating scaffolds for intermediate developer s to follow. Understands the frameworks in use across the entire stack and has dabbled enough outside of the toolset to know what's good and what's not. Has a plan for how to improve whatever the team's next project is.",
      "Expert": "Can organize and design critical-path features for the organization / project and its users. Has a wide variety of experience outside of a project's selected toolset and understands the life-and-hype cycle of new frameworks at a deep level. Has a plan to make sure the entire team's skills will be used to their maximum potential for the next project even if it doesn't build their resume quite as much.\r"
    }
  },
  "Infrastructure": {
    "Source Control and Application Lifecycle Management": {
      "Beginner": "Can clone a git repository but unfamiliar with branching and little or no knowledge of keeping work tracking organized.",
      "Advanced Beginner": "Understands branching strategies but generally just for a single team. Can follow strong work tracking practices when provided.",
      "Intermediate": "Understands branching strategies from a couple of teams and approaches and can provide pros and cons. Understands work tracking and adheres to standards. Able to provide good feedback and opinions for improving team processes.",
      "Advanced": "Knows the pros and cons of multiple branching strategies but may still try and force an inappropriate one on a certain product. Understands work tracking systems and how to passively communicate with the organization / project through them. An advocate for improved process.",
      "Expert": "Capable of creating a cohesive branching strategy that serves the need of both the development team and users. Enhances the ALM experience with rich tagging versioning and automated documentation generation. Can provide valuable and cross-team guidance on best practices.\r"
    },
    "Design and Deployment": {
      "Beginner": "Will require significant help to set up a typical project. Little understanding of underlying hardware or the particulars of tool selection.",
      "Advanced Beginner": "\"Will encounter issues if the \"\"happy path\"\" of environment setup hits a snag. Will not understand environment progression or the details of how components fit together.\"",
      "Intermediate": "Can use well-developed Google-Fu to sort through issues and environmental differences. Understands environment progression for lower environments and has optimized their setup for debugging.",
      "Advanced": "Has set up instructions for projects and knows common pitfalls. May be familiar with containers. Capable of designing simple DevOps pipelines and fully understands environment progression for product(s) they work on.",
      "Expert": "Understands almost every aspect of the infrastructure required for a solution and has optimized them for performance and simplicity. Can author rich DevOps pipelines even if their knowledge may not match a dedicated professional."
    }
  }
}
